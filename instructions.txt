To run Docker container capable of accessing PostgreSQL database hosted on client machine (e.g. client machine is Windows computer from which Docker container is built), complete following steps. 
- add line below to PostgreSQL file pg_hba.conf under IPv4 local connections. Without additional configuration, Docker containers will always have network address in the 172.17.0.0/16 network. 
    host    all             all             172.17.0.0/16           trust
- modify PostgreSQL file postgresql.conf as shown below to allow database to listen to all IP addresses (both internal and external) instead of just localhost
    listen_addresses = '*'
- in database configuration file, set DB_HOST = 'database'
- since database is hosted on client machine rather than Docker container, need to find IP address of client machine and set this as the database host that Docker connects to. This way, Docker connects to PostgreSQL database hosted on client machine rather than searching for database hosted on itself (e.g. if database were 'localhost')
    (client machine) --> command prompt --> ipconfig --> ethernet adapter vEthernet (WSL) --> record IPv4 address = 172.27.16.1
    (when running Docker container) --> 
    
local, offline (entrypoint = ["python", "manage.py", "start", "-ro", "-rof"]): docker run --add-host=localhost:172.23.144.1 -p 80:80 finale
local, online (entrypoint = ["python", "manage.py", "start", "-o", "-ro", "-rof"]): docker run --add-host=localhost:172.23.144.1 -p 443:443 finale_online
amazon EC2 instance (config.DB_HOST = amazon RDS endpoint): docker run --entrypoint "python manage.py start -o -ro -rof" -p 443:443 finale

python manage.py start -o -ro -rof 
["python", "manage.py", "start", "-ro", "-rof"] 

- REFERENCE DOCKER_EXAMPLES